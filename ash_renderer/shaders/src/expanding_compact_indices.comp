#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters : require

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#extension GL_EXT_debug_printf : enable

#include "structs\cluster_data.glsl"
#include "structs\range.glsl"

layout(binding = 1) readonly buffer ShouldDraw {
	uint should_draw[];
};

layout(binding = 2) readonly buffer Clusters {
	ClusterData clusters[];
};

layout(binding = 4) buffer DrawIndexedIndirectData {
	DrawIndexedIndirect indirect[];
};

layout(binding = 5) writeonly buffer ResultIndicies {
	uint result_indicies[];
};

layout(std430, binding = 7) readonly buffer RangeBuffer {
	Range ranges[];
};

layout(binding = 8) readonly buffer Indicies {
	uint indices[];
};

layout(push_constant) uniform constants {
	uint instance_index;
};

const uint LOCAL_SIZE_X = 1;
const uint LOCAL_SIZE_Y = 32;

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

void main() {
	uvec3 id = gl_GlobalInvocationID;
	uint lid = gl_LocalInvocationID.x;
	uint gid = gl_WorkGroupID.x;

	uint idx = id.x;
	uint indirect_index = instance_index + 1;
	uint start = ranges[indirect_index].start;
	uint end = ranges[indirect_index].end;

	// debugPrintfEXT("Instance: %u\n", instance_index);

	// debugPrintfEXT("Range: %u - %u\n", start, end);

	uint len = end - start;
	uint cluster_selection = should_draw[start + idx];

	// uint index_count = should_draw[1];

	// Add things within this workgroup
	bool draw = cluster_selection > 0;

	uint indices_start = indirect[indirect_index].base_index;

	if (subgroupAll(draw)) {
		uint cluster_id = cluster_selection - 1;

		uint destination_idx;
		if (subgroupElect()) {
			destination_idx =
				indices_start + atomicAdd(indirect[indirect_index].index_count, clusters[cluster_id].index_count);
		}
		destination_idx = subgroupBroadcastFirst(destination_idx);

		uint ind_start = clusters[cluster_id].index_offset;

		// Ideally, compute this in a step after writing cull to a buffer and compacting it down
		for (uint i = gl_LocalInvocationID.y; i < clusters[cluster_id].index_count; i += LOCAL_SIZE_Y) {
			result_indicies[destination_idx + i] = indices[ind_start + i];
		}
	}
}