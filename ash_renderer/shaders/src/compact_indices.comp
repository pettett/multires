#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters : require

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable

#extension GL_EXT_debug_printf : enable

#include "structs\cluster_data.glsl"

layout(binding = 1) readonly buffer ShouldDraw {
	uint should_draw[];
};

layout(binding = 2) readonly buffer Clusters {
	ClusterData clusters[];
};

layout(binding = 5) writeonly buffer ResultIndicies {
	uint result_indicies[];
};

layout(binding = 6) readonly buffer Indicies {
	uint indices[];
};

layout(binding = 7) buffer DrawIndexedIndirectData {
	DrawIndexedIndirect indirect[];
};

layout(push_constant) uniform constants {
	uint instance_index;
};

const uint LOCAL_SIZE_X = 16;

layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

void main() {
	uvec3 id = gl_GlobalInvocationID;
	uint lid = gl_LocalInvocationID.x;
	uint gid = gl_WorkGroupID.x;

	uint idx = id.x;

	uint len = should_draw[0];
	// uint index_count = should_draw[1];

	// Add things within this workgroup
	bool draw = should_draw[idx + 1] > 0 && idx < len;

	uint indices_start =
		instance_index == 0 ? 0 : indirect[instance_index - 1].base_index + indirect[instance_index - 1].index_count;

	if (draw) {
		uint cluster_id = should_draw[idx + 1] - 1;

		uint destination_idx =
			indices_start + atomicAdd(indirect[instance_index].index_count, clusters[cluster_id].index_count);

		uint ind_start = clusters[cluster_id].index_offset;

		// Ideally, compute this in a step after writing cull to a buffer and compacting it down
		for (uint i = 0; i < clusters[cluster_id].index_count; i++) {
			result_indicies[destination_idx + i] = indices[ind_start + i];
		}
	}

	if (idx == 0) {
		indirect[instance_index].instance_count = 1;
		indirect[instance_index].base_index = indices_start;
		indirect[instance_index].base_vertex = 0;
		indirect[instance_index].base_instance = instance_index;
	}
}