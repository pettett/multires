#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_EXT_control_flow_attributes : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_KHR_shader_subgroup_ballot : enable

// #define DEBUG

// #extension GL_EXT_debug_printf : enable

#include "structs\camera.glsl"
#include "structs\cluster_data.glsl"
#include "structs\indirect_dispatch_data.glsl"
#include "structs\mesh_task_payload.glsl"
#include "structs\model.glsl"
#include "structs\range.glsl"

layout(binding = 0) readonly buffer ModelUniformBufferObject {
	Model models[];
};
layout(binding = 1) writeonly buffer ShouldDraw {
	uint draw_list[];
};
layout(binding = 2) readonly buffer Clusters {
	ClusterData clusters[];
};
layout(binding = 3) readonly uniform CameraUniformBufferObject {
	CameraUniformObject ubo;
};
layout(binding = 4) buffer DrawIndexedIndirectData {
	DrawIndexedIndirect indirect[];
};
layout(std430, binding = 6) writeonly buffer IndirectDrawBuffer {
	IndirectDispatchData indirect_draw[];
};
layout(std430, binding = 7) buffer RangeBuffer {
	Range ranges[];
};

#include "util\cluster.glsl"
#include "util\culling.glsl"

const uint STARTING = 32;
const uint LOCAL_SIZE_X = 32;

layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

const uint QUEUE_SIZE = 5000;

// Use half sized types due to limited shared storage space
shared uint16_t[QUEUE_SIZE] queue;
shared uint16_t[QUEUE_SIZE] to_draw;

#include "util\traverse_select_template.glsl"

// This algorithm works by exploring the bag starting from the root vertices. If a cluster cannot be drawn,
// its children are appended to the queue and every iteration of the core loop grabs that many items out of the queue
// for analysis
void main() {
	uint idx = gl_GlobalInvocationID.x;
	uint instance = gl_WorkGroupID.y;
	uint cluster_count = traverse_dag(idx, instance);

	output_selected_clusters(idx, instance, cluster_count, 1);

	// We also need to output the indirect draw data corresponding to this selection.
	// The indices will be copied as a later step
	uint index_count = 0;

	// share addition between invocations
	for (uint c = idx; c < cluster_count; c += LOCAL_SIZE_X) {
		index_count += clusters[to_draw[c]].index_count;
	}

	index_count = subgroupAdd(index_count);
	if (subgroupElect()) {

		uint indices_start = atomicAdd(indirect[0].base_index, index_count);

		// keep index count as 0, so it can be atomic added to allocate individual cluster index positions
		indirect[instance + 1].index_count = 0;
		indirect[instance + 1].instance_count = 1;
		indirect[instance + 1].base_index = indices_start;
		indirect[instance + 1].base_vertex = 0;
		indirect[instance + 1].base_instance = instance;

		// debugPrintfEXT("Index: %u - %u\n", indices_start, index_count);
	}
}