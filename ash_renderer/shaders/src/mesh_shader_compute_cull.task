#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_EXT_debug_printf : enable

#include "structs\cluster_data.glsl"
#include "structs\mesh_task_payload.glsl"
#include "structs\range.glsl"

const float LARGE_ERROR = 100000000000000000.0;

// Bindings and layout

layout(binding = 2) readonly buffer Clusters {
	ClusterData clusters[];
};

layout(binding = 1) readonly buffer ShouldDraw {
	uint draw_clusters[];
};

layout(binding = 7) readonly buffer Ranges {
	Range ranges[];
};

// Access to the indirect draw params for the next frame

layout(local_size_x = TASK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// Workgroup Shared memory
// shared uint max_count;
taskPayloadSharedEXT MeshTaskPayload payload;

void main() {
	uint local_index = gl_LocalInvocationID.x;
	uint instance_index = gl_DrawID;

	uint draw_idx = gl_GlobalInvocationID.x + ranges[instance_index + 1].start;

	// if (draw_idx - local_index > ranges[instance_index].end) {
	// 	// somehow everything in this workgroup is out of range. Should not be possible, but emit 0 anyway
	// 	EmitMeshTasksEXT(0, 0, 0);
	// 	return;
	// }

	bool in_range = draw_idx <= ranges[instance_index + 1].end;

	// debugPrintfEXT("%d - %d %d\n", instance_index, ranges[instance_index].start, ranges[instance_index].end);

	bool draw = in_range && draw_clusters[draw_idx] > 0;
	uint cluster_index = draw_clusters[draw_idx] - 1;

	// draw = true;
	// cluster_index = gl_GlobalInvocationID.x;

	uint meshlet_start = draw ? clusters[cluster_index].meshlet_start : 0;
	uint meshlet_count = min(MAX_CHILDREN, draw ? clusters[cluster_index].meshlet_count : 0);
	payload.instance = instance_index;

	uint max_count = subgroupMax(meshlet_count);

	// if (subgroupElect()) {
	// 	EmitMeshTasksEXT(max_count, TASK_GROUP_SIZE, 1);
	// }

	uint count = subgroupAdd(meshlet_count);
	uint off = subgroupExclusiveAdd(meshlet_count);

	for (uint i = 0; i < meshlet_count; i++) {
		payload.meshlet[off + i] = meshlet_start + i;
	}

	if (subgroupElect()) {
		EmitMeshTasksEXT(count, 1, 1);
	}
}