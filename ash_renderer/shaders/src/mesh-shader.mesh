#version 460

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes: require
#extension GL_ARB_separate_shader_objects: enable

#include "structs\mesh_task_payload.glsl"
#include "structs\mesh_frag_payload.glsl"
#include "structs\camera.glsl" // CameraUniformObject 
#include "structs\vertex.glsl" // Vertex
#include "structs\meshlet.glsl" // s_meshlet

 
const uint GROUP_SIZE = 16;


layout (binding = 0) readonly buffer ModelUniformBufferObject {
    mat4 models[];
};

layout (binding = 5) uniform CameraUniformBufferObject {
    CameraUniformObject ubo; 
};

layout (std430, binding = 3) readonly buffer InputBufferI {
    s_meshlet meshlets[];
};

// std430 is **really** important
layout (std430, binding = 4) readonly buffer InputBufferV {
    Vertex verts[];
};




layout (local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout (triangles, max_vertices = MAX_VERTS, max_primitives = MAX_PRIMITIVES) out;

layout (location = 0) out Interpolants OUT[];


taskPayloadSharedEXT MeshTaskPayload payload;

vec3 integer_to_rgb(float integer) {
    float red = mod((integer * 109.0 + 47.0), 269.0) / 269.0;
    float green = mod((integer * 83.0 + 251.0), 127.0) / 127.0;
    float blue = mod((integer * 251.0 + 83.0), 293.0) / 293.0;
    return vec3(red, green, blue);
}


void main() {
    uint thread_id = gl_WorkGroupID.x;
    uint local_id = gl_LocalInvocationID.x;
    uint cluster_id = gl_WorkGroupID.y;

	if (thread_id >= payload.meshlet_count[cluster_id]){
    	SetMeshOutputsEXT(0, 0);
		return;
	}

    uint meshlet_index = payload.meshlet_start[cluster_id] + thread_id;

	vec3 colour = integer_to_rgb(meshlet_index);

	const uint vertex_count = min(MAX_VERTS, meshlets[meshlet_index].vertex_count);
	const uint primitive_count = min(MAX_PRIMITIVES, meshlets[meshlet_index].tri_count);

    SetMeshOutputsEXT(vertex_count, primitive_count);

    // pub const RECT_TEX_COORD_INDICES_DATA: [u32; 12] = [0, 1, 2, 2, 3, 0, 4, 5, 6, 6, 7, 4];
	[[unroll]]
    for (uint i = local_id; i < vertex_count; i += GROUP_SIZE) {

		uint vert_idx = meshlets[meshlet_index].vertices[i];
		
		gl_MeshVerticesEXT[i].gl_Position = ubo.view_proj * models[payload.instance] * vec4(verts[vert_idx].pos.xyz, 1);
		
		OUT[i].world_normal = (models[payload.instance] * vec4(verts[vert_idx].normal.xyz, 0)).xyz;
		
		OUT[i].fragColor = colour;
		
		OUT[i].fragTexCoord = vec2(1, 1);
    }

	[[unroll]]
    for (uint i = local_id; i < primitive_count; i += GROUP_SIZE) {
		uint tri = meshlets[meshlet_index].indices[i];

		uint a = (tri >> 0) & 255;
		uint b = (tri >> 8) & 255;
		uint c = (tri >> 16) & 255;

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(a, b, c);
    }
}